@echo off
setlocal

::------------------------------------------
:: Definim variabile pentru căi
set PROJECT_PATH=C:\Qt_projects\USG
set BUILD_PATH=%PROJECT_PATH%\build
set PREBUILD_PATH=%BUILD_PATH%\prebuild
set QT_PATH=C:\Qt\6.9.3\msvc2019_64
set QIF_PATH=C:\Qt\Tools\QtInstallerFramework\4.10\bin
set WDEPLOY=%QT_PATH%\bin\windeployqt6.exe
set BUILD_EXE=%BUILD_PATH%\Desktop_Qt_6_9_3_MSVC2022_64bit-Release\release\USG.exe

::------------------------------------------
:: Ștergem și recreăm folderul de build
if exist "%PREBUILD_PATH%" rd /s /q "%PREBUILD_PATH%"
mkdir "%PREBUILD_PATH%"

::------------------------------------------
:: Copiem executabilul
copy "%BUILD_EXE%" "%PREBUILD_PATH%\USG.exe"

::------------------------------------------
:: Rulăm windeployqt pentru a include toate dependințele Qt
"%WDEPLOY%" "%PREBUILD_PATH%\USG.exe"

::------------------------------------------
:: Copiem fișierele necesare într-un loop
for %%F in ( 
    libmysql.dll
    Qt6OpenGLWidgets.dll
    Qt6UiTools.dll
    Qt6Designer.dll
    Qt6DesignerComponents.dll
    Qt6Xml.dll
) do (
    copy "%QT_PATH%\bin\%%F" "%PREBUILD_PATH%\%%F"
)

::------------------------------------------
:: Copiem biblioteci externe
copy "%PROJECT_PATH%\3rdparty\LimeReport\release\limereport.dll" "%PREBUILD_PATH%\limereport.dll"
copy "%PROJECT_PATH%\3rdparty\LimeReport\release\QtZint.dll" "%PREBUILD_PATH%\QtZint.dll"
copy "%PROJECT_PATH%\3rdparty\LimeReport\debug\limereport.dll" "%PREBUILD_PATH%\limereportd.dll"
copy "%PROJECT_PATH%\3rdparty\LimeReport\debug\QtZint.dll" "%PREBUILD_PATH%\QtZintd.dll"
echo Au fost copiate librariile LimeReport ...

::------------------------------------------
:: Copiem directoarele recursive
xcopy "%PROJECT_PATH%\3rdparty\LimeReport" "%PREBUILD_PATH%\LimeReport" /S /Y /I
xcopy "%PROJECT_PATH%\3rdparty\openssl" "%PREBUILD_PATH%\openssl" /S /Y /I
xcopy "%PROJECT_PATH%\resources\icons" "%PREBUILD_PATH%\icons" /S /Y /I
xcopy "%PROJECT_PATH%\resources\templets" "%PREBUILD_PATH%\templets" /S /Y /I
echo Au fost copiate librariile openssl si templets ...

::------------------------------------------
:: Copiem installer
set INSTALLER_PATH=%BUILD_PATH%\installer
set "SCRIPT_PATH=%INSTALLER_PATH%\packages\com.alovada.usg\meta\installscript.qs"
if exist "%INSTALLER_PATH%" rd /s /q "%INSTALLER_PATH%"

xcopy "%PROJECT_PATH%\installer\linux" "%INSTALLER_PATH%" /S /Y /I
echo Au fost copiate fisierele installer-lui
xcopy "%PREBUILD_PATH%\*" "%INSTALLER_PATH%\packages\com.alovada.usg\data\" /S /Y /I
::copy /Y "C:\Qt_projects\lib\vcredist_x64.exe" "%INSTALLER_PATH%\packages\com.alovada.usg\data\vcredist_x64.exe"
echo Au fost copiate fisierele proiectului in installer

::------------------------------------------
:: Modificam fiserul config.xml - implicit sa 
:: fie calea de instalare C:\USG
set CONFIGXML_PATH=%INSTALLER_PATH%\config\config.xml

:: Modificăm <TargetDir> folosind PowerShell
powershell -Command "& {(Get-Content '%CONFIGXML_PATH%') -replace '<TargetDir>@HomeDir@/USG</TargetDir>', '<TargetDir>@RootDir@/USG</TargetDir>' | Set-Content '%CONFIGXML_PATH%'}"
echo A fost modificat fisierul config.xml

::------------------------------------------
:: Crearea fisierului installscript.qs 
:: Creăm fișierul și scriem conținutul
echo function Component^() {} > "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo Component.prototype.createOperations = function^() { >> "%SCRIPT_PATH%"
echo     component.createOperations^(); >> "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo     // visierul de distribuire >> "%SCRIPT_PATH%"
echo     var vcRedistFile = "@TargetDir@/vcredist_x64.exe"; >> "%SCRIPT_PATH%"
echo     var vcRedistURL = "https://aka.ms/vs/17/release/vc_redist.x64.exe"; >> "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo     // Crearea directorului țintă >> "%SCRIPT_PATH%"
echo     component.addOperation^("Mkdir", "@TargetDir@"); >> "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo     var desktopFile = "@HomeDir@/Desktop/USG - Evidența investigațiilor ecografice.lnk"; >> "%SCRIPT_PATH%"
echo     var exePath = "@TargetDir@/USG.exe"; >> "%SCRIPT_PATH%"
echo     var iconPath = "@TargetDir@/icons/eco_248x248.ico"; >> "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo     // Crearea shortcut-ului pentru Windows >> "%SCRIPT_PATH%"
echo     component.addOperation^("CreateShortcut", exePath, desktopFile, ^ >> "%SCRIPT_PATH%"
echo         "workingDirectory=@TargetDir@", ^ >> "%SCRIPT_PATH%"
echo         "iconPath=" + iconPath, ^ >> "%SCRIPT_PATH%"
echo         "iconId=0", ^ >> "%SCRIPT_PATH%"
echo         "description=USG - Evidența investigațiilor ecografice"); >> "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo     // Crearea intrării în Start Menu >> "%SCRIPT_PATH%"
echo     var startMenuFile = "@StartMenuDir@/USG.lnk"; >> "%SCRIPT_PATH%"
echo     component.addOperation^("CreateShortcut", exePath, startMenuFile, ^ >> "%SCRIPT_PATH%"
echo         "workingDirectory=@TargetDir@", ^ >> "%SCRIPT_PATH%"
echo         "iconPath=" + iconPath, ^ >> "%SCRIPT_PATH%"
echo         "iconId=0", ^ >> "%SCRIPT_PATH%"
echo         "description=USG - Evidența investigațiilor ecografice"); >> "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo     // Descărcăm fișierul folosind PowerShell >> "%SCRIPT_PATH%"
echo     component.addOperation("Execute", "powershell", "-Command", "Invoke-WebRequest -Uri " + vcRedistURL + " -OutFile " + vcRedistFile); >> "%SCRIPT_PATH%"
echo. >> "%SCRIPT_PATH%"
echo     // Instalăm Visual C++ Redistributable >> "%SCRIPT_PATH%"
echo     component.addOperation("Execute", vcRedistFile, "/quiet", "/norestart"); >> "%SCRIPT_PATH%"
echo } >> "%SCRIPT_PATH%"

echo A fost modificat fisierul installscript.qs (pentru windows) !!!

::------------------------------------------
:: Citim versiunea
set "VERSION="
for /f "delims=" %%i in (%PROJECT_PATH%\version.txt) do set "VERSION=%%i"
::------------------------------------------
echo Se lanseaza binarycreator ...
set PACKAGE_FILE=%BUILD_PATH%\USG_v%VERSION%_Windows_amd64.exe
set "SHA256_SUM_TXT="
set SHA_FILE="%PACKAGE_FILE%.sha256"

if exist "%PACKAGE_FILE%" del /f /q "%PACKAGE_FILE%"
if exist "%SHA_FILE%" del /f /q "%SHA_FILE%"

%QIF_PATH%\binarycreator.exe -c %INSTALLER_PATH%\config\config.xml -p %INSTALLER_PATH%\packages %PACKAGE_FILE% 

::------------------------------------------
:: Calculăm hash-ul SHA256 folosind certutil
set "ZIP_PATH=C:\Program Files\7-Zip\7z.exe"

if not exist "%ZIP_PATH%" (
    echo EROARE: 7-Zip nu este instalat sau calea "%ZIP_PATH%" este incorectă!
    exit /b 1
)

:: Compute SHA256 using 7-Zip
for /f "tokens=*" %%A in ('cmd /c ""%ZIP_PATH%" h "%PACKAGE_FILE%" -scrcSHA256 | findstr /C:"SHA256 for data""') do set "SHA256_SUM_TXT=%%A"

:: Save the hash to a file
echo %SHA256_SUM_TXT% > "%SHA_FILE%"
echo S-a calculat suma SHA256 fiserului de instalare ...

::------------------------------------------
:: Stergem directoriile
echo Se elimina dosare ...
::if exist "%INSTALLER_PATH%" rd /s /q "%INSTALLER_PATH%"
::if exist "%PREBUILD_PATH%" rd /s /q "%PREBUILD_PATH%"

::------------------------------------------
:: Finalizare
echo Build completat cu succes !!!
exit /b 0
